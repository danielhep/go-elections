package main

import (
	"fmt"
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"github.com/danielhep/go-elections/internal"
	"slices"
	"time"
)

templ contestPage(contest internal.Contest, ballotResponses []internal.BallotResponse, countyUpdates []internal.Update, stateUpdate *internal.Update) {
	@layout(contest.BallotTitle + " Results") {
		<div class="mb-4">
			<a href={ templ.URL(fmt.Sprintf("/%s/", contest.ElectionID)) } class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
					<path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
				</svg>
				Back to all contests
			</a>
		</div>
		<div class="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
			<div class="px-4 py-5 sm:px-6">
				<h2 class="text-xl leading-6 font-medium text-gray-900">Ballot Title: { contest.BallotTitle }</h2>
				<h3 class="text-lg leading-6 text-gray-700 mt-1">District: { contest.District }</h3>
				<p class="text-lg leading-6 text-gray-700 mt-1">Election: { contest.Election.Name }</p>
			</div>
			<div class="border-t border-gray-200 px-4 py-5 sm:p-0">
				<div class="overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
								for _, response := range ballotResponses {
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider text-right">{ response.Name }</th>
								}
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							if stateUpdate != nil {
								@tableRow(*stateUpdate, ballotResponses)
							}
							for _, update := range countyUpdates {
								@tableRow(update, ballotResponses)
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
		if len(countyUpdates) > 0 {
			<div
				id="chart-data"
				class="bg-white shadow overflow-hidden sm:rounded-lg"
				chart-data={ templ.JSONString(getChartData(ballotResponses)) }
				x-data="{data: JSON.parse(document.getElementById('chart-data').getAttribute('chart-data'))}"
				x-init="
				const ctx = document.getElementById('voteChart').getContext('2d');
    			new Chart(ctx, {
    				type: 'line',
    				data: data,
    				options: {
    					responsive: true,
    					plugins: {
    						legend: {
    							position: 'top',
    						},
    						title: {
    							display: true,
    							text: 'King County Votes Over Time'
    						}
    					}
    				}
    			});
            "
			>
				<canvas id="voteChart" width="400" height="200"></canvas>
			</div>
		}
		<div class="mt-4">
			<a href="/" class="text-indigo-600 hover:text-indigo-900">Back to Main Page</a>
		</div>
	}
}

templ tableRow(update internal.Update, ballotResponses []internal.BallotResponse) {
	<tr class="text-right">
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
			<div class="flex items-center gap-2">
				if update.JurisdictionType == internal.CountyJurisdiction {
					<img src="/static/kingcounty.jpg" class="h-6 rounded-md" alt="This row is from King County data."/>
				} else if update.JurisdictionType == internal.StateJurisdiction {
					<img src="/static/stateflag.jpg" class="h-6 rounded-md" alt="This row is from the WA Secretary of State."/>
				}
				<p class="pt-[2px]">{ formatFirstCol(update) }</p>
			</div>
		</td>
		for _, candidate := range ballotResponses {
			<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 justify-righ">
				@voteCountAndPercentage(getVotesForUpdate(candidate, update.ID))
			</td>
		}
	</tr>
}

templ voteCountAndPercentage(votes int, percentage float32) {
	<p>{ message.NewPrinter(language.English).Sprintf("%d\n", votes) }</p>
	<p>{ fmt.Sprintf("%.2f%%", percentage) }</p>
}

func printFormattedNumber(number int) string {
	p := message.NewPrinter(language.English)
	return p.Sprintf("%d\n", number)
}

func getAllUpdatesFromCandidate(candidate internal.BallotResponse) (ret []internal.Update) {
	for _, voteTally := range candidate.VoteTallies {
		if voteTally.Votes > 0 {
			ret = append(ret, voteTally.Update)
		}
	}
	return
}

func getBallotResponses(voteTallies []internal.VoteTally) []internal.BallotResponse {
	candidateMap := make(map[uint]internal.BallotResponse)
	for _, tally := range voteTallies {
		candidateMap[tally.BallotResponseID] = tally.BallotResponse
	}

	var candidates []internal.BallotResponse
	for _, candidate := range candidateMap {
		candidates = append(candidates, candidate)
	}
	return candidates
}

func getVotesForUpdate(candidate internal.BallotResponse, updateID uint) (int, float32) {
	for _, tally := range candidate.VoteTallies {
		if tally.UpdateID == updateID {
			return tally.Votes, tally.VotePercentage
		}
	}
	return 0, 0
}

func formatFirstCol(update internal.Update) string {
	if update.JurisdictionType == internal.CountyJurisdiction {
		return formatDate(update.Timestamp)
	} else {
		return "State (final tally)"
	}
}

func formatDate(timestamp time.Time) string {
	return timestamp.Format("Jan 02, 2006")
}

type chartData struct {
	Labels   []string `json:"labels"`
	Datasets []struct {
		Label           string `json:"label"`
		Data            []int  `json:"data"`
		BorderColor     string `json:"borderColor"`
		BackgroundColor string `json:"backgroundColor"`
		Fill            bool   `json:"fill"`
	} `json:"datasets"`
}

func getChartData(candidates []internal.BallotResponse) chartData {
	// Prepare data for the chart
	datasets := make(map[string][]int)
	var labels []string

	for i, candidate := range candidates {
		for _, voteTally := range candidate.VoteTallies {
			if voteTally.Update.JurisdictionType == internal.StateJurisdiction {
				continue
			}
			if i == 0 {
				labels = append(labels, formatDate(voteTally.Update.Timestamp))
			}
			datasets[candidate.Name] = append(datasets[candidate.Name], voteTally.Votes)
		}
	}

	labels = slices.Clip(labels)

	// Create Chart.js data structure
	chartData := chartData{
		Labels: labels,
	}

	colors := []string{"#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"}
	colorIndex := 0

	for candidate, votes := range datasets {
		chartData.Datasets = append(chartData.Datasets, struct {
			Label           string `json:"label"`
			Data            []int  `json:"data"`
			BorderColor     string `json:"borderColor"`
			BackgroundColor string `json:"backgroundColor"`
			Fill            bool   `json:"fill"`
		}{
			Label:           candidate,
			Data:            votes,
			BorderColor:     colors[colorIndex%len(colors)],
			BackgroundColor: colors[colorIndex%len(colors)],
			Fill:            false,
		})
		colorIndex++
	}

	return chartData
}
