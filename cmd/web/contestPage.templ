package main

import (
	"fmt"
	"github.com/danielhep/go-elections/internal/types"
	"slices"
	"time"
)

templ contestPage(contest types.Contest, candidates []types.Candidate, countyUpdates []types.Update, stateUpdate *types.Update) {
	@layout(contest.Name + " Results") {
		<div class="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
			<div class="px-4 py-5 sm:px-6">
				<h2 class="text-xl leading-6 font-medium text-gray-900">Ballot Title: { contest.Name }</h2>
				<h3 class="text-lg leading-6 text-gray-700 mt-1">District: { contest.District }</h3>
			</div>
			<div class="border-t border-gray-200 px-4 py-5 sm:p-0">
				<div class="overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
								for _, candidate := range candidates {
									<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{ candidate.Name }</th>
								}
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							if stateUpdate != nil {
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ formatFirstCol(*stateUpdate) }</td>
									for _, candidate := range candidates {
										<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
											{ fmt.Sprintf("%d", getVotesForUpdate(candidate, stateUpdate.ID)) }
										</td>
									}
								</tr>
							}
							for _, update := range countyUpdates {
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ formatFirstCol(update) }</td>
									for _, candidate := range candidates {
										<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
											{ fmt.Sprintf("%d", getVotesForUpdate(candidate, update.ID)) }
										</td>
									}
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
		if len(countyUpdates) > 0 {
			<div
				id="chart-data"
				class="bg-white shadow overflow-hidden sm:rounded-lg"
				chart-data={ templ.JSONString(getChartData(candidates)) }
				x-data="{data: JSON.parse(document.getElementById('chart-data').getAttribute('chart-data'))}"
				x-init="
				const ctx = document.getElementById('voteChart').getContext('2d');
    			new Chart(ctx, {
    				type: 'line',
    				data: data,
    				options: {
    					responsive: true,
    					plugins: {
    						legend: {
    							position: 'top',
    						},
    						title: {
    							display: true,
    							text: 'King County Votes Over Time'
    						}
    					}
    				}
    			});
            "
			>
				<canvas id="voteChart" width="400" height="200"></canvas>
			</div>
		}
		<div class="mt-4">
			<a href="/" class="text-indigo-600 hover:text-indigo-900">Back to Main Page</a>
		</div>
	}
}

func getAllUpdatesFromCandidate(candidate types.Candidate) (ret []types.Update) {
	for _, voteTally := range candidate.VoteTallies {
		if voteTally.Votes > 0 {
			ret = append(ret, voteTally.Update)
		}
	}
	return
}

func getCandidates(voteTallies []types.VoteTally) []types.Candidate {
	candidateMap := make(map[uint]types.Candidate)
	for _, tally := range voteTallies {
		candidateMap[tally.CandidateID] = tally.Candidate
	}

	var candidates []types.Candidate
	for _, candidate := range candidateMap {
		candidates = append(candidates, candidate)
	}
	return candidates
}

func getVotesForUpdate(candidate types.Candidate, updateID uint) int {
	for _, tally := range candidate.VoteTallies {
		if tally.UpdateID == updateID {
			return tally.Votes
		}
	}
	return 0
}

func formatFirstCol(update types.Update) string {
	if update.JurisdictionType == types.CountyJurisdiction {
		return formatDate(update.Timestamp)
	} else {
		return "State (final tally)"
	}
}

func formatDate(timestamp time.Time) string {
	return timestamp.Format("Jan 02, 2006")
}

type chartData struct {
	Labels   []string `json:"labels"`
	Datasets []struct {
		Label           string `json:"label"`
		Data            []int  `json:"data"`
		BorderColor     string `json:"borderColor"`
		BackgroundColor string `json:"backgroundColor"`
		Fill            bool   `json:"fill"`
	} `json:"datasets"`
}

func getChartData(candidates []types.Candidate) chartData {
	// Prepare data for the chart
	datasets := make(map[string][]int)
	var labels []string

	for i, candidate := range candidates {
		for _, voteTally := range candidate.VoteTallies {
			if voteTally.Update.JurisdictionType == types.StateJurisdiction {
				continue
			}
			if i == 0 {
				labels = append(labels, formatDate(voteTally.Update.Timestamp))
			}
			datasets[candidate.Name] = append(datasets[candidate.Name], voteTally.Votes)
		}
	}

	labels = slices.Clip(labels)

	// Create Chart.js data structure
	chartData := chartData{
		Labels: labels,
	}

	colors := []string{"#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"}
	colorIndex := 0

	for candidate, votes := range datasets {
		chartData.Datasets = append(chartData.Datasets, struct {
			Label           string `json:"label"`
			Data            []int  `json:"data"`
			BorderColor     string `json:"borderColor"`
			BackgroundColor string `json:"backgroundColor"`
			Fill            bool   `json:"fill"`
		}{
			Label:           candidate,
			Data:            votes,
			BorderColor:     colors[colorIndex%len(colors)],
			BackgroundColor: colors[colorIndex%len(colors)],
			Fill:            false,
		})
		colorIndex++
	}

	return chartData
}
